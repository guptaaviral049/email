<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Email Viewer</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>

  <!-- Header -->
  <header class="header">
    <h1>Email Dashboard</h1>
    <button onclick="refreshData()">üîÑ Refresh</button>
  </header>

  <!-- Popup Notification -->
  <div id="popup" class="popup">Action successful!</div>

  <!-- Email Table -->
  <main>
    <table>
      <thead>
        <tr>
          <th onclick="sortTable('id')">ID</th>
          <th onclick="sortTable('referenceId')">Reference ID</th>
          <th onclick="sortTable('classification')">Classification</th>
          <th onclick="sortTable('type')">Type</th>
          <th onclick="sortTable('emailSubject')">Subject</th>
          <th onclick="sortTable('status')">Status</th>
          <th onclick="sortTable('date')">Date</th>
          <th>Download</th>
          <th>Show Email</th>
        </tr>
      </thead>
      <tbody id="tableBody">
        <!-- Filled by JS -->
      </tbody>
    </table>
  </main>

  <!-- Email Modal Popup -->
  <div id="emailModal" class="modal">
    <div class="modal-content">
      <span class="close-btn" onclick="closeModal()">&times;</span>
      <pre id="emailContent" class="email-preview">Loading...</pre>
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>



body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background: #f5f7fa;
}

.header {
  background-color: #2f3e46;
  color: white;
  padding: 16px 24px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

button {
  padding: 6px 12px;
  background-color: #1976d2;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background-color: #1565c0;
}

table {
  width: 95%;
  margin: 20px auto;
  border-collapse: collapse;
  background-color: white;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

th, td {
  padding: 12px 16px;
  border: 1px solid #ddd;
  text-align: left;
}

th {
  background-color: #eeeeee;
  cursor: pointer;
  user-select: none;
}

tr:hover {
  background-color: #f1f1f1;
}

/* Popup */
.popup {
  visibility: hidden;
  min-width: 250px;
  background-color: rgba(0, 0, 0, 0.85);
  color: #fff;
  text-align: center;
  border-radius: 8px;
  padding: 14px 24px;
  position: fixed;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 9999;
  opacity: 0;
  font-size: 16px;
  transition: opacity 0.3s ease, visibility 0.3s ease;
}

.popup.show {
  visibility: visible;
  opacity: 1;
}

/* Modal */
.modal {
  display: none;
  position: fixed;
  z-index: 10000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.6);
}

.modal-content {
  background-color: #fefefe;
  margin: 10% auto;
  padding: 20px;
  border-radius: 8px;
  width: 80%;
  max-height: 70%;
  overflow-y: auto;
  position: relative;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.close-btn {
  color: #aaa;
  position: absolute;
  top: 12px;
  right: 20px;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.email-preview {
  white-space: pre-wrap;
  font-family: monospace;
  font-size: 14px;
}


let emailData = [];
let currentSort = { column: "date", order: "desc" };
const tableBody = document.getElementById("tableBody");

function loadEmails() {
  fetch("/api/emails")
    .then((res) => res.json())
    .then((data) => {
      emailData = data;
      renderTable();
    })
    .catch((error) => {
      showPopup("‚ö†Ô∏è Error loading emails");
      console.error("Error:", error);
    });
}

function renderTable() {
  emailData.sort((a, b) => {
    let valA = a[currentSort.column];
    let valB = b[currentSort.column];

    if (currentSort.column === "date") {
      valA = new Date(valA);
      valB = new Date(valB);
    }

    if (valA < valB) return currentSort.order === "asc" ? -1 : 1;
    if (valA > valB) return currentSort.order === "asc" ? 1 : -1;
    return 0;
  });

  tableBody.innerHTML = "";

  emailData.forEach((row) => {
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td>${row.id}</td>
      <td>${row.referenceId}</td>
      <td>${row.classification}</td>
      <td>${row.type}</td>
      <td>${row.emailSubject}</td>
      <td>${row.status}</td>
      <td>${row.date}</td>
      <td><button onclick="downloadEmail(${row.id})">Download</button></td>
      <td><button onclick="showEmail(${row.id})">Show Email</button></td>
    `;
    tableBody.appendChild(tr);
  });

  updateSortIcons();
}

function sortTable(column) {
  if (currentSort.column === column) {
    currentSort.order = currentSort.order === "asc" ? "desc" : "asc";
  } else {
    currentSort.column = column;
    currentSort.order = "asc";
  }
  renderTable();
}

function updateSortIcons() {
  const headers = document.querySelectorAll("thead th");
  headers.forEach((th) => {
    const col = th.innerText.split(" ")[0]; // remove arrow
    if (col.toLowerCase() === currentSort.column.toLowerCase()) {
      th.innerText = `${col} ${currentSort.order === "asc" ? "‚Üë" : "‚Üì"}`;
    } else {
      th.innerText = col;
    }
  });
}

function showPopup(message) {
  const popup = document.getElementById("popup");
  popup.innerText = message;
  popup.classList.add("show");
  setTimeout(() => popup.classList.remove("show"), 2000);
}

function downloadEmail(id) {
  showPopup("‚è¨ Downloading...");
  window.location.href = `/api/emails/${id}/download`;
}

function showEmail(id) {
  fetch(`/api/emails/${id}/text`)
    .then((res) => res.text())
    .then((text) => {
      document.getElementById("emailContent").innerText = text;
      document.getElementById("emailModal").style.display = "block";
      showPopup("üì¨ Email preview loaded");
    })
    .catch(() => {
      document.getElementById("emailContent").innerText = "Error loading email.";
      showPopup("‚ö†Ô∏è Failed to load email");
    });
}

function closeModal() {
  document.getElementById("emailModal").style.display = "none";
}

function refreshData() {
  showPopup("üîÅ Refreshing...");
  loadEmails();
}

// Load on page ready
window.onload = loadEmails;



