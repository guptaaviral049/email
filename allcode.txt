email-ui/
├── index.html
├── styles.css
└── script.js
email-backend/
├── src/
│   └── main/
│       └── java/
│           └── com/
│               └── example/
│                   └── emailviewer/
│                       ├── EmailData.java
│                       ├── EmailDataController.java
│                       └── EmailDataRepository.java
├── src/
│   └── main/
│       └── resources/
│           └── application.properties
├── pom.xml


package com.example.emailviewer.entity;

import jakarta.persistence.*;
import lombok.Data;
import java.time.LocalDate;

@Entity
@Data
public class EmailData {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private LocalDate date;
    private String referenceId;
    private String classification;
    private String type;

    @Lob
    private byte[] email;

    private String emailSubject;
    private String status;
}


package com.example.emailviewer.repository;

import com.example.emailviewer.entity.EmailData;
import org.springframework.data.jpa.repository.JpaRepository;

public interface EmailDataRepository extends JpaRepository<EmailData, Long> {
}


package com.example.emailviewer.controller;

import com.example.emailviewer.entity.EmailData;
import com.example.emailviewer.repository.EmailDataRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/emails")
@CrossOrigin(origins = "*")
public class EmailDataController {

    @Autowired
    private EmailDataRepository repo;

    @GetMapping
    public List<Map<String, Object>> getAllEmails() {
        return repo.findAll().stream().map(email -> {
            Map<String, Object> map = new HashMap<>();
            map.put("id", email.getId());
            map.put("date", email.getDate());
            map.put("reference_id", email.getReferenceId());
            map.put("classification", email.getClassification());
            map.put("type", email.getType());
            map.put("email_subject", email.getEmailSubject());
            map.put("status", email.getStatus());
            return map;
        }).collect(Collectors.toList());
    }

    @GetMapping("/{id}/download")
    public ResponseEntity<byte[]> downloadEmail(@PathVariable Long id) {
        Optional<EmailData> optional = repo.findById(id);
        if (optional.isEmpty()) {
            return ResponseEntity.notFound().build();
        }

        byte[] data = optional.get().getEmail();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setContentDisposition(ContentDisposition.attachment()
                .filename("email_" + id + ".eml").build());

        return new ResponseEntity<>(data, headers, HttpStatus.OK);
    }

    @PostMapping
    public ResponseEntity<String> insertEmail(@RequestBody EmailData emailData) {
        repo.save(emailData);
        return ResponseEntity.status(HttpStatus.CREATED).body("Email data inserted successfully.");
    }

    @PostMapping("/upload-eml")
    public ResponseEntity<String> uploadEml(
            @RequestParam("file") MultipartFile file,
            @RequestParam("referenceId") String referenceId,
            @RequestParam("classification") String classification,
            @RequestParam("type") String type,
            @RequestParam("emailSubject") String emailSubject,
            @RequestParam("status") String status
    ) {
        try {
            EmailData email = new EmailData();
            email.setDate(LocalDate.now());
            email.setReferenceId(referenceId);
            email.setClassification(classification);
            email.setType(type);
            email.setEmail(file.getBytes());
            email.setEmailSubject(emailSubject);
            email.setStatus(status);

            repo.save(email);
            return ResponseEntity.ok("EML uploaded successfully.");
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to upload EML file.");
        }
    }
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Email Grid Viewer</title>
    <link rel="stylesheet" href="styles.css" />
</head>
<body>
    <div class="container">
        <h1>Email Records</h1>
        <table id="emailTable">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Reference ID</th>
                    <th>Classification</th>
                    <th>Type</th>
                    <th>Subject</th>
                    <th>Status</th>
                    <th>Download</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <script src="script.js"></script>
</body>
</html>

/* styles.css */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f7f9fc;
    color: #333;
}

.container {
    width: 90%;
    margin: 40px auto;
    padding: 20px;
    background-color: white;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
}

h1 {
    text-align: center;
    margin-bottom: 20px;
    color: #2c3e50;
}

#emailTable {
    width: 100%;
    border-collapse: collapse;
}

#emailTable th, #emailTable td {
    padding: 12px;
    border: 1px solid #ddd;
    text-align: center;
}

#emailTable th {
    background-color: #34495e;
    color: white;
    font-weight: bold;
}

#emailTable tbody tr:hover {
    background-color: #ecf0f1;
}

a.download-link {
    color: #3498db;
    text-decoration: none;
    font-weight: bold;
}

a.download-link:hover {
    text-decoration: underline;
    color: #2c3e50;
}


// script.js
document.addEventListener("DOMContentLoaded", () => {
    fetch("/api/emails")
        .then(res => res.json())
        .then(data => {
            const tbody = document.querySelector("#emailTable tbody");
            data.forEach(email => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${email.id}</td>
                    <td>${email.date}</td>
                    <td>${email.reference_id}</td>
                    <td>${email.classification}</td>
                    <td>${email.type}</td>
                    <td>${email.email_subject}</td>
                    <td>${email.status}</td>
                    <td><a class="download-link" href="/api/emails/${email.id}/download" target="_blank">Download</a></td>
                `;
                tbody.appendChild(row);
            });
        })
        .catch(error => {
            console.error("Failed to fetch email data:", error);
        });
});

# application.properties
spring.datasource.url=jdbc:postgresql://localhost:5432/your_db
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true




